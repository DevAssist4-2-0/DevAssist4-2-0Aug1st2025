#!/bin/bash
"set -euo pipefail"

# --- Configuration ---
DEPLOY_ENV="${1:-prod}"  # Default deployment environment
HONEYPOT="$HOME/.honeypot.txt"
LOG_FILE="deployment.log"  # Log file
TWILIO_SID="${TWILIO_SID}"  # Twilio Account SID (set in environment)
TWILIO_TOKEN="${TWILIO_TOKEN}" # Twilio Auth Token (set in environment)
TWILIO_FROM="${TWILIO_FROM}" # Twilio phone number (set in environment)
TWILIO_TO="${TWILIO_TO}" # Recipient phone number (set in environment)

# --- Functions ---
log() 
 " {}local timestamp=$(date +'%Y-%m-%d %H:%M:%S') # Corrected timestamp format}"
  echo "[$timestamp] $1"
  echo "[$timestamp] $1" >> "$LOG_FILE"
}

speak() {
  log "💬 Assistant says: $1"
  if command -v say >/dev/null 2>&1; then
    say "$1"
  else
    log "⚠️  'say' command not found.  Speech output disabled."
  fi
}

# --- Script Execution ---
log "🛡️ Assistant activated..."

# --- Honeypot Check ---
if [[ ! -f "$HONEYPOT" ]]; then
  ALERT="Warning! Honeypot file missing. Possible breach detected!"
  log "⚠️ $ALERT"
  speak "$ALERT Abort deployment immediately."
  if command -v osascript >/dev/null 2>&1; then
    osascript -e 'display notification "Honeypot breach detected." with title "🚨 ALERT"'
  fi
  exit 1
fi
log "✅ Honeypot file verified."

# --- Conditional Greeting ---
DAY=$(date +%A)
if [[ "$DAY" == "Friday" ]]; then
  speak "Deploying on a Friday? You brave soul. Good luck out there."
else
  speak "Deployment to $DEPLOY_ENV environment has started."
fi

# --- SMS Notification ---
if [[ -z "$TWILIO_SID" || -z "$TWILIO_TOKEN" || -z "$TWILIO_FROM" || -z "$TWILIO_TO" ]]; then
  log "❌  Twilio credentials not set.  Skipping SMS notification."
else
  MESSAGE="🚀 Deployment started by Appel420 ($DEPLOY_ENV)"
  log "✉️ Sending SMS alert..."

  response=$(curl -s -X POST "https://api.twilio.com/2010-04-01/Accounts/$TWILIO_SID/Messages.json" \
    --data-urlencode "From=$TWILIO_FROM" \
    --data-urlencode "To=$TWILIO_TO" \
    --data-urlencode "Body=$MESSAGE" \
    -u "$TWILIO_SID:$TWILIO_TOKEN")

  if [[ $? -eq 0 ]]; then # Check curl exit code
    if echo "$response" | grep -q '"status":'; then
      log "✅ SMS sent successfully."
      speak "SMS confirmation delivered."
    else
      log "❌ SMS sending failed. Twilio response: $response"
      speak "Uh-oh. SMS confirmation failed. Check your Twilio setup."
    fi
  else
    log "❌ SMS sending failed. Curl error: $?"
    speak "Uh-oh. SMS confirmation failed. Check your Twilio setup and network connection."
  fi
fi

# --- macOS Notification ---
if command -v osascript >/dev/null 2>&1; then
  osascript -e "display notification \"Deploy triggered! Buckle up.\" with title \"CI/CD 🚀\""
fi

# --- Deployment Commands (Replace with your actual commands) ---
log "🚧 Starting deployment..."
# git pull origin main
# pm2 restart your-app-name
# ... your deployment commands ...
log "✅ Deployment commands executed."

# --- Post-Deployment Confirmation ---
log "🎉 Deployment script complete."
read -p "Did the deployment complete successfully? (y/n): " success
success=$(echo "$success" | tr '[:upper:]' '[:lower:]') # Convert to lowercase
if [[ "$success" == "y" || "$success" == "yes" ]]; then
  speak "Glad to hear it. Deployment success noted."
  log "✅ Deployment success confirmed."
else
  speak "Uh-oh. Need help troubleshooting? Reach out ASAP."
  log "❌ Deployment failure reported."
fi

exit 0
